---
import { getEntry } from "astro:content";
import Post from "../layouts/post.astro";
import { getCollection } from "astro:content";
import Content, { type ContentItem } from "../layouts/content.astro";
import StatusQuoDemo from "../content/partials/react-input-component-clear-value-after-input/demos/StatusQuoDemo";
import UncontrolledDemo from "../content/partials/react-input-component-clear-value-after-input/demos/UncontrolledDemo";

const authorCollection = await getCollection("authors");

const authorIds = ["david"];

const authors = authorCollection.filter((author) =>
  authorIds.includes(author.slug),
);

const editorIds = ["velimir"];

const editors = authorCollection.filter((editor) =>
  editorIds.includes(editor.slug),
);

export const data = {
  title:
    "The controlled and the uncontrolled way to clear React Input component value after submit",
  description:
    "There are multiple ways to go about building React Input components. The most often used solution is to create a controlled Input component, but there is a not well known solution that uses the useImperativeHandle hook.",
  category: "Learn JavaScript",
  image: "/images/react-input-component-clear-value-after-input.jpg",
  createdAt: 1651439868751,
  updatedAt: 1651439868751,
  abstract:
    "We had to refactor the Input component from our internal component library because its value wasn't getting cleared after submission. In this article, we discuss different ways for how to solve this problem in React. One of the solutions for your Input component discussed in this post is a controlled component, which is achieved by adding a state to the component itself. Another solution is to keep the Input component uncontrolled and give it the ability to pass a ref via props to the rendered <input> HTML element, allowing the parent component to pass the ref to the Input component. The alternative solution we suggest is to use a not well-known hook called useImperativeHandle in combination with a piece of React API called forwardRef. This allows the parent component to access the component API with ref.current, while the Input component remains uncontrolled.",
};

const slug = "/react-input-component-clear-value-after-input.astro";

const intro = await getEntry(
  "partials",
  "react-input-component-clear-value-after-input/10-intro",
);
const { Content: Intro } = await intro!.render();

const background = await getEntry(
  "partials",
  "react-input-component-clear-value-after-input/20-background",
);
const { Content: Background } = await background!.render();

const backgroundConclusion = await getEntry(
  "partials",
  "react-input-component-clear-value-after-input/25-background-conclusion",
);
const { Content: BackgroundConclusion } = await backgroundConclusion!.render();

const controlled = await getEntry(
  "partials",
  "react-input-component-clear-value-after-input/30-controlled",
);
const { Content: Controlled } = await controlled!.render();

const uncontrolled = await getEntry(
  "partials",
  "react-input-component-clear-value-after-input/40-uncontrolled",
);
const { Content: Uncontrolled } = await uncontrolled!.render();

const solutionConclusion = await getEntry(
  "partials",
  "react-input-component-clear-value-after-input/50-solution-conclusion",
);
const { Content: SolutionConclusion } = await solutionConclusion!.render();

const contentList: ContentItem[] = [
  {
    title: "Background",
    href: "#background"
  },
  {
    title: "Input as a controlled component",
    href: "#input-as-a-controlled-component"
  },
  {
    title: "Input as an uncontrolled component",
    href: "#input-as-an-uncontrolled-component"
  },
  {
    title: "Solution",
    href: "#solution"
  },
  {
    title: "Conclusion",
    href: "#conclusion"
  },
];
---

<Post
  title={data.title}
  image={data.image}
  createdAt={data.createdAt}
  updatedAt={data.updatedAt}
  description={data.description}
  abstract={data.abstract}
  author={authors[0]}
  editor={editors[0]}
  slug={slug}
  category={data.category}
>
  <Intro />
  <Content contentList={contentList} />
  <Background />
  <StatusQuoDemo client:load />
  <BackgroundConclusion />
  <Controlled />
  <Uncontrolled />
  <UncontrolledDemo client:load />
  <SolutionConclusion />
</Post>
