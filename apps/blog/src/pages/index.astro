---
import Base from "../layouts/base.astro";
import { getCollection } from "astro:content";
import { Picture } from "astro:assets";

const markdownPosts = await getCollection("posts");

const pages = (await Astro.glob("../pages/**/*.astro")).filter(
  (page) => !page.url?.includes("[") && !page.url?.includes("index.astro"),
);

const prefix = import.meta.env.DEV ? "/" : "/blog";

const posts = [
  ...markdownPosts.map((post) => ({
    url: `${prefix}${prefix === "/" ? "" : "/"}${post.slug}`,
    title: post.data.title,
    date: new Date(post.data.date),
    image: post.data.image,
    authors: post.data.authors || [],
    category: (post as any).data.category,
  })),
  ...pages.map((page) => ({
    url: `${prefix === "/" ? "" : prefix}${page.url}`,
    title: (page as any).data.title,
    date: new Date((page as any).data.date),
    image: (page as any).data.image,
    authors: (page as any).data.authors || [],
    category: (page as any).data.category,
  })),
];
posts.sort((a, b) => b.date.getTime() - a.date.getTime());

function capitalizeFirstLetter(word: string) {
  return word.charAt(0).toUpperCase() + word.slice(1);
}

function formatDate(date: Date) {
  return date.toLocaleDateString("en-GB", {
    day: "2-digit",
    month: "short",
    year: "numeric",
  });
}
---

<Base>
  <ol class="grid grid-cols-1 gap-x-8 gap-y-14 sm:grid-cols-2">
    {
      posts.map(({ url, title, image, authors, category, date }, i) => (
        <li class={i === 0 ? "col-span-1 sm:col-span-2" : ""}>
          <a class="flex flex-col gap-4" href={url}>
            <div class="overflow-hidden rounded-lg">
              {image && (
                <Picture
                  src={image}
                  alt={title}
                  width={1024}
                  loading="lazy"
                  decoding="auto"
                />
              )}
            </div>
            <ul class="flex gap-5 list-none">
              {authors.length > 0 && (
                <li>
                  {authors.length > 1 ? 'Authors: ' : 'Author: '}
                  {(authors as string[]).map((author, i) => capitalizeFirstLetter(author) + (i < authors.length - 1 ? ", " : ""))}
                </li>
              )}
              <li>Date: {date && formatDate(date)}</li>
              {authors.category && (
                <li>Category: {category}</li>
              )}
            </ul>
            <h3 class="text-3xl">{title}</h3>
          </a>
        </li>
      ))
    }
  </ol>
</Base>
