---
import { getEntry } from "astro:content";
import Post from "../../layouts/post.astro";
import { getCollection } from "astro:content";
import Content, { type ContentItem } from "../../layouts/content.astro";
import SimpleMouseTracker from "../../content/partials/how-to-write-custom-react-hooks/demos/SimpleMouseTracker/demo";
import SimpleButtonClickTracker from "../../content/partials/how-to-write-custom-react-hooks/demos/SimpleButtonClickTracker/demo";
import NextLevelButtonClickTracker from "../../content/partials/how-to-write-custom-react-hooks/demos/NextLevelButtonClickTracker/demo";
import UseFetchDataDemo from "../../content/partials/how-to-write-custom-react-hooks/demos/useFetchData/demo";
import UseDebouncedSearchDemo from "../../content/partials/how-to-write-custom-react-hooks/demos/useDebouncedSearch/demo";

export async function getData() {
  const authorCollection = await getCollection("authors");

  const authorIds = ["david"];

  const authors = authorCollection.filter((author) =>
    authorIds.includes(author.slug),
  );

  const editorIds = ["velimir"];

  const editors = authorCollection.filter((editor) =>
    editorIds.includes(editor.slug),
  );

  return {
    title: "How to write custom React hooks? - Code Exercises",
    description:
      "Custom React hooks are user-defined functions that allow developers to reuse stateful logic and side effects from React components in a clean and reusable way. Try to solve the given exercises!",
    image: "/images/how-to-write-custom-react-hooks.png",
    createdAt: 1675873546123,
    updatedAt: 1675873546123,
    authors,
    editors,
    abstract:
      "Unlock the full potential of **React** with custom hooks! In this blog post, we'll go through some exercises that can help you level up your react skills by writing custom hooks in **TypeScript**. From state management to performance optimization, you'll learn how to create reusable logic for your React components and make your code more efficient and scalable. Every exercise has a brief description of the problem, starting code and relevant links. Try to solve the problems without taking a peek at the solution.",
    category: "Learn Javascript",
  };
}

export const data = await getData();

const slug = "/how-to-write-custom-react-hooks.astro";

const intro = await getEntry(
  "partials",
  "how-to-write-custom-react-hooks/10-intro",
);
const { Content: Intro } = await intro!.render();

const useMousePosition = await getEntry(
  "partials",
  "how-to-write-custom-react-hooks/20-use-mouse-position",
);
const { Content: UseMousePosition } = await useMousePosition!.render();

const useMousePositionSolution = await getEntry(
  "partials",
  "how-to-write-custom-react-hooks/25-use-mouse-position-solution",
);
const { Content: UseMousePositionSolution } =
  await useMousePositionSolution!.render();

const useClickCounter = await getEntry(
  "partials",
  "how-to-write-custom-react-hooks/30-use-click-counter",
);
const { Content: UseClickCounter } = await useClickCounter!.render();

const useClickCounterSolution = await getEntry(
  "partials",
  "how-to-write-custom-react-hooks/35-use-click-counter-solution",
);
const { Content: UseClickCounterSolution } =
  await useClickCounterSolution!.render();

const useClickTracker = await getEntry(
  "partials",
  "how-to-write-custom-react-hooks/40-use-click-tracker",
);
const { Content: UseClickTracker } = await useClickTracker!.render();

const useClickTrackerSolution = await getEntry(
  "partials",
  "how-to-write-custom-react-hooks/45-use-click-tracker-solution",
);
const { Content: UseClickTrackerSolution } =
  await useClickTrackerSolution!.render();

const useFetchData = await getEntry(
  "partials",
  "how-to-write-custom-react-hooks/50-use-fetch-data",
);
const { Content: UseFetchData } = await useFetchData!.render();

const useFetchDataSolution = await getEntry(
  "partials",
  "how-to-write-custom-react-hooks/55-use-fetch-data-solution",
);
const { Content: UseFetchDataSolution } = await useFetchDataSolution!.render();

const useDebouncedSearch = await getEntry(
  "partials",
  "how-to-write-custom-react-hooks/60-use-debounced-search",
);
const { Content: UseDebouncedSearch } = await useDebouncedSearch!.render();

const useDebouncedSearchSolution = await getEntry(
  "partials",
  "how-to-write-custom-react-hooks/65-use-debounced-search-solution",
);
const { Content: UseDebouncedSearchSolution } =
  await useDebouncedSearchSolution!.render();

const contentList: ContentItem[] = [
  {
    title: "useMousePosition",
    href: "#usemouseposition",
  },
  {
    title: "useClickCounter",
    href: "#useclickcounter",
  },
  {
    title: "useClickTracker",
    href: "#useclicktracker",
  },
  {
    title: "useFetchData",
    href: "#usefetchdata",
  },
  {
    title: "useDebouncedSearch",
    href: "#usedebouncedsearch",
  },
];
---

<Post
  title={data.title}
  image={data.image}
  createdAt={data.createdAt}
  updatedAt={data.updatedAt}
  description={data.description}
  abstract={data.abstract}
  author={data.authors[0]}
  editor={data.editors[0]}
  slug={slug}
  category={data.category}
>
  <Intro />
  <Content contentList={contentList} />
  <UseMousePosition />
  <SimpleMouseTracker client:load />
  <UseMousePositionSolution />
  <UseClickCounter />
  <SimpleButtonClickTracker client:load />
  <UseClickCounterSolution />
  <UseClickTracker />
  <NextLevelButtonClickTracker client:load />
  <UseClickTrackerSolution />
  <UseFetchData />
  <UseFetchDataDemo client:load />
  <UseFetchDataSolution />
  <UseDebouncedSearch />
  <UseDebouncedSearchDemo client:load />
  <UseDebouncedSearchSolution />
</Post>
