---
import Field from './Field.astro';
---

<form
  class='bg-[#F6FCFD] rounded-xl mx-auto col-span-6 md:col-span-12 lg:mx-0 p-7 lg:col-span-6 xl:col-span-5 shadow-[0_5px_20px] shadow-neutral-500/25 flex flex-col gap-2 max-w-[530px]'
  id='contact-us-form'
>
  <Field
    isTextArea={false}
    inputProps={{
      name: 'form-full-name',
      maxlength: '100',
      placeholder: 'Full Name *',
    }}
    labelProps={{
      for: 'form-full-name',
      'aria-hidden': 'false',
    }}
    label='Full Name *'
  />
  <Field
    isTextArea={false}
    inputProps={{
      name: 'form-email',
      maxlength: '100',
      placeholder: 'E-Mail *',
    }}
    labelProps={{
      for: 'form-email',
      'aria-hidden': 'false',
    }}
    label='E-Mail *'
  />
  <div>
    <Field
      isTextArea
      textAreaProps={{
        name: 'form-message',
        maxlength: 1500,
        placeholder: 'Tell Us About Your Project *',
        id: 'form-message',
      }}
      labelProps={{
        for: 'form-message',
        'aria-hidden': 'false',
      }}
      label='Tell Us About Your Project *'
    />
    <span class='text-[#3C3843] text-xs text-right mt-1 block'
      ><span id='char-counter'>0</span>/1500</span
    >
  </div>
  <div class='flex gap-2.5 mt-4'>
    <input
      id='form-consent'
      name='form-consent'
      type='checkbox'
      aria-describedby='form-consent-text'
      class='h-4 w-4 rounded border-gray-300 text-[#67a807] focus:ring-[#67a807] mt-1 cursor-pointer'
    />
    <label
      id='form-consent-text'
      for='form-consent'
      class='text-[#3C3843] [&>em]:not-italic [&_b]:text-[#67a807] [&>em]:font-semibold cursor-pointer'
    >
      I give consent to <em><b>Cro</b>Coder</em> to use this information to contact
      me
    </label>
  </div>
  <button
    class='rounded-md bg-[#85a32a] px-[25px] w-full py-4 focus-visible:bg-[#67a807] focus:bg-[#67a807] focus-visible:outline-1 focus-visible:outline-[#3C3843] text-center text-[#3C3843] text-base font-medium mt-6'
  >
    SUBMIT
  </button>
</form>
<script>
  import formContent from '../content/contact-us/form.json';

  type FormContent = typeof formContent;

  const messageField = document.getElementById('form-message');
  const charCounter = document.getElementById('char-counter');
  const form = document.getElementById('contact-us-form');

  const updateCount = (e: Event) => {
    const charCount = `${(e.target as HTMLTextAreaElement).value.length}`;
    if (charCounter) {
      charCounter.textContent = charCount;
    }
  };

  const validateFullName = (
    fullName: FormDataEntryValue | null,
    formData: FormContent
  ) => {
    if (typeof fullName !== 'string' || !fullName) {
      return formData.fullname.requiredField;
    }
    if (fullName.length < 3) {
      return formData.fullname.minimalLength;
    }
    return null;
  };

  const validateEmail = (
    email: FormDataEntryValue | null,
    formData: FormContent
  ) => {
    if (typeof email !== 'string' || !email) {
      return formData.email.requiredField;
    }
    if (/[^@ \t\r\n]+@[^@ \t\r\n]+\.[^@ \t\r\n]+/.test(email) === false) {
      return formData.email.invalidEmail;
    }
    return null;
  };

  const validateAboutProject = (
    aboutProject: FormDataEntryValue | null,
    formData: FormContent
  ) => {
    if (typeof aboutProject !== 'string' || !aboutProject) {
      return formData.projectInfo.requiredField;
    }
    return null;
  };

  if (messageField) {
    messageField.addEventListener('input', updateCount);
  }

  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target as HTMLFormElement);
      const fullName = formData.get('form-full-name');
      const email = formData.get('form-email');
      const message = formData.get('form-message');

      const fullNameError = validateFullName(fullName, formContent);
      if (fullNameError) {
        //handle
        return;
      }
      const emailError = validateEmail(email, formContent);
      if (emailError) {
        //handle
        return;
      }
      const messageError = validateAboutProject(message, formContent);
      if (messageError) {
        //handle
        return;
      }

      // TO-DO => Valudate data
      if (!fullNameError && !emailError && !messageError) {
        const response = await fetch('/api/contact', {
          method: 'POST',
          body: formData,
        });
        const data = await response.json();

        console.log({ data });
      }
    });
  }
</script>
