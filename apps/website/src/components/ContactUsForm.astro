---
import Field from "./Field.astro";
import * as formContent from "../content/contact/form.md";
import "../styles/loader.css";
---

<form
  class="bg-[#F6FCFD] group/contact-us rounded-xl mx-auto col-span-6 md:col-span-12 lg:mx-0 p-7 pb-6 lg:col-span-6 xl:col-span-5 shadow-[0_5px_20px] shadow-neutral-500/25 flex flex-col gap-2 max-w-[530px]"
  id="contact-us-form"
  novalidate
>
  <Field
    isTextArea={false}
    inputProps={{
      name: "form-full-name",
      maxlength: "100",
      placeholder: formContent.frontmatter.fullname,
      required: true,
      minlength: 3,
    }}
    labelProps={{
      for: "form-full-name",
      "aria-hidden": "false",
    }}
    label={formContent.frontmatter.fullname}
    errorText={formContent.frontmatter.fullnameLength}
  />
  <Field
    isTextArea={false}
    inputProps={{
      name: "form-email",
      maxlength: "100",
      placeholder: formContent.frontmatter.email,
      type: "email",
      required: true,
    }}
    labelProps={{
      for: "form-email",
      "aria-hidden": "false",
    }}
    label={formContent.frontmatter.email}
    errorText={formContent.frontmatter.emailInvalid}
  />
  <div>
    <Field
      isTextArea
      textAreaProps={{
        name: "form-message",
        maxlength: 1500,
        minlength: 1,
        placeholder: formContent.frontmatter.projectInfo,
        id: "form-message",
        required: true,
      }}
      labelProps={{
        for: "form-message",
        "aria-hidden": "false",
      }}
      label={formContent.frontmatter.projectInfo}
      errorText={formContent.frontmatter.requiredField}
    />
    <span class="text-[#3C3843] text-xs text-right mt-1 block">
      <span id="char-counter">0</span>/1500
    </span>
  </div>
  <div class="mt-4">
    <div class="flex gap-2.5">
      <input
        id="form-consent"
        name="form-consent"
        type="checkbox"
        required
        aria-describedby="form-consent-text"
        class="h-4 w-4 rounded border-gray-300 text-[#67a807] focus:ring-[#67a807] mt-1 cursor-pointer"
      />
      <label
        set:html={formContent.frontmatter.consent}
        id="form-consent-text"
        for="form-consent"
        class="text-[#3C3843] [&>em]:not-italic [&_b]:text-[#67a807] [&>em]:font-semibold cursor-pointer"
      />
    </div>
    <button
      id="form-submit-button"
      class="rounded-md
      min-h-14
      group-invalid/contact-us:pointer-events-none
      group-invalid/contact-us:opacity-30
      group-invalid/contact-us:focus-visible:bg-[#85a32a]
      group-invalid/contact-us:focus-visible:outline-transparent
      group-invalid/contact-us:focus:bg-[#85a32a]
      bg-[#85a32a]
      hover:bg-[#84a22ab3]
      px-[25px] w-full py-4
      focus-visible:bg-[#84a22ab3]
      focus:bg-[#84a22ab3]
      focus-visible:outline-1
      focus-visible:outline-[#3C3843]
      text-center
      text-[#3C3843]
      text-base
      font-medium mt-6"
    >
      <span>{formContent.frontmatter.submit}</span>
      <div class="loader mx-auto hidden"></div>
    </button>
    <p id="form-notification" class="text-sm min-h-6 pt-1"></p>
  </div>
  <script>
    import * as notification from "../content/contact/notification.md";

    const messageField = document.getElementById("form-message");
    const charCounter = document.getElementById("char-counter");

    const form = document.getElementById("contact-us-form");

    const submitBtn = form?.querySelector("#form-submit-button");
    const submitBtnElems = submitBtn?.querySelectorAll("*");
    const submitBtnContent = submitBtnElems && submitBtnElems[0];
    const submitBtnLoader = submitBtnElems && submitBtnElems[1];

    const notificationElem = form?.querySelector("#form-notification");

    const clearForm = () => {
      if (form) {
        const fields = form.querySelectorAll("input, textarea");
        fields.forEach((child) => {
          if (
            child.tagName === "INPUT" &&
            (child as HTMLInputElement).type === "checkbox"
          ) {
            (child as HTMLInputElement).checked = false;
          } else {
            (child as HTMLInputElement).value = "";
          }
        });
      }
    };

    const showLoader = () => {
      if (submitBtnContent && submitBtnLoader) {
        submitBtnContent.classList.add("hidden");
        submitBtnLoader.classList.add("!block");
      }
    };

    const hideLoader = () => {
      if (submitBtnContent && submitBtnLoader) {
        submitBtnContent.classList.remove("hidden");
        submitBtnLoader.classList.remove("!block");
      }
    };

    const updateCount = (e: Event) => {
      const charCount = `${(e.target as HTMLTextAreaElement).value.length}`;
      if (charCounter) {
        charCounter.textContent = charCount;
      }
    };

    if (messageField) {
      messageField.addEventListener("input", updateCount);
    }

    if (form) {
      form.addEventListener("submit", async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target as HTMLFormElement);
        const name = formData.get("form-full-name");
        const email = formData.get("form-email");
        const message = formData.get("form-message");
        const consent = formData.get("form-consent");

        if (!name || !email || !message || !consent) {
          return;
        }

        showLoader();
        const response = await fetch("/api/contact", {
          method: "POST",
          mode: "cors",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            name,
            email,
            message,
            hasConsent: consent ? true : false,
          }),
        });

        if (response.status !== 200 && notificationElem) {
          notificationElem.classList.add("text-red-500");
          notificationElem.textContent = notification.frontmatter.error;
          hideLoader();
          return;
        }

        if (notificationElem) {
          notificationElem.classList.add("text-[#67a807]");
          notificationElem.innerHTML = notification.frontmatter.success;
          hideLoader();
          clearForm();
        }
      });
    }
  </script>
</form>
