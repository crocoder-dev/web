---
import type { MarkdownInstance } from "astro";
import { getCollection } from "astro:content";
import { plainify } from "../ify";

const {
  title,
  image,
  createdAt,
  authorName,
  abstract,
  updatedAt,
  editorName,
  slug,
  description,
} = Astro.props;

const formatDate = (timestamp: number): string => {
  const d = new Date(timestamp);
  const year = d.getFullYear();
  const month = String(d.getMonth() + 1).padStart(2, "0");
  const day = String(d.getDate()).padStart(2, "0");

  return `${year}-${month}-${day}`;
};

let paritals: MarkdownInstance<Record<string, any>>[] = [];

if (slug === "/how-to-write-custom-react-hooks.astro") {
  paritals = await Astro.glob(
    "../content/partials/how-to-write-custom-react-hooks/*.md",
  );
} else if (slug === "/the-dom-exercises.astro") {
  paritals = await Astro.glob("../content/partials/the-dom-exercises/*.md");
} else if (slug === "/react-input-component-clear-value-after-input.astro") {
  paritals = await Astro.glob(
    "../content/partials/react-input-component-clear-value-after-input/*.md",
  );
}

const allPartialsPlainText = (
  await Promise.all(
    paritals.map(async (page) => {
      const { rawContent } = page;
      const plainText = plainify(rawContent());
      return plainText;
    }),
  )
).join("");

const sufix = import.meta.env.DEV ? "" : "blog/";

const siteUrl = import.meta.env.SITE_URL + sufix;

const posts = await getCollection("posts");
const currentPost = posts.find((post) => post.slug === slug);

const articleBodyMarkdown = currentPost ? currentPost.body : "";
const articleBody = plainify(articleBodyMarkdown);

const dateCreated = formatDate(createdAt);
const dateModified = formatDate(updatedAt);

const schema = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  headline: title,
  name: title,
  image: image,
  articleBody: paritals.length ? allPartialsPlainText : articleBody,
  abstract: abstract,
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": siteUrl + slug,
  },
  author: {
    "@type": "Person",
    name: authorName,
  },
  editor: {
    "@type": "Person",
    name: editorName,
  },
  publisher: {
    "@type": "Organization",
    name: "CroCoder, Inc.",
    logo: {
      "@type": "ImageObject",
      url: "/croc-nav.svg",
    },
  },
  dateCreated: dateCreated,
  datePublished: dateCreated,
  dateModified: dateModified,
};
---

<script
  type="application/ld+json"
  is:inline
  set:html={JSON.stringify(schema)}
/>
<title>{title} | CroCoder</title>

<meta property="og:url" content={siteUrl + slug} />
<meta property="og:type" content="website" />
<meta property="og:title" content={title} />
<meta property="og:name" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={siteUrl + "/public" + image} />

<meta name="twitter:card" content="summary_large_image" />
<meta property="twitter:domain" content="crocoder.dev" />
<meta property="twitter:url" content={siteUrl + slug} />
<meta name="twitter:title" content={title} />
<meta name="twitter:text:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={siteUrl + "/public" + image} />
